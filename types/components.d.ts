/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { InputType } from "./components/tp-input/utils/enums.utils";
export { InputType } from "./components/tp-input/utils/enums.utils";
export namespace Components {
    interface TpInput {
        "label": string;
        "outlined": boolean;
        "placeholder": string;
        "startValue": any;
        "type": InputType;
    }
}
export interface TpInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTpInputElement;
}
declare global {
    interface HTMLTpInputElementEventMap {
        "didLoad": { ref: HTMLTpInputElement };
        "userInput": { ref: HTMLTpInputElement; event: InputEvent };
    }
    interface HTMLTpInputElement extends Components.TpInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTpInputElementEventMap>(type: K, listener: (this: HTMLTpInputElement, ev: TpInputCustomEvent<HTMLTpInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTpInputElementEventMap>(type: K, listener: (this: HTMLTpInputElement, ev: TpInputCustomEvent<HTMLTpInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTpInputElement: {
        prototype: HTMLTpInputElement;
        new (): HTMLTpInputElement;
    };
    interface HTMLElementTagNameMap {
        "tp-input": HTMLTpInputElement;
    }
}
declare namespace LocalJSX {
    interface TpInput {
        "label"?: string;
        "onDidLoad"?: (event: TpInputCustomEvent<{ ref: HTMLTpInputElement }>) => void;
        "onUserInput"?: (event: TpInputCustomEvent<{ ref: HTMLTpInputElement; event: InputEvent }>) => void;
        "outlined"?: boolean;
        "placeholder"?: string;
        "startValue"?: any;
        "type"?: InputType;
    }
    interface IntrinsicElements {
        "tp-input": TpInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tp-input": LocalJSX.TpInput & JSXBase.HTMLAttributes<HTMLTpInputElement>;
        }
    }
}
