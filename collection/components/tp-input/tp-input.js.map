{"version":3,"file":"tp-input.js","sourceRoot":"","sources":["../../../src/components/tp-input/tp-input.tsx"],"names":[],"mappings":"AAAA,OAAO,2CAA2C,CAAC;AACnD,OAAO,6CAA6C,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAgB,OAAO,EAAE,MAAM,eAAe,CAAC;AACvF,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAOhD,MAAM,OAAO,OAAO;;;oBAOA,SAAS,CAAC,IAAI;;;;;IAehC,gBAAgB;QACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAED,WAAW,CAAC,KAAiB;QAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAEhE,OAAO,CACL,EAAC,IAAI,uDACF,QAAQ,CAAC,CAAC,CAAC,CACV,8BAAwB,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,GAA2B,CAC/J,CAAC,CAAC,CAAC,CACF,4BAAsB,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,GAAyB,CACrH,CACI,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import '@material/web/textfield/filled-text-field';\nimport '@material/web/textfield/outlined-text-field';\nimport { Component, Event, Host, Prop, h, EventEmitter, Element } from '@stencil/core';\nimport { InputType } from './utils/enums.utils';\n\n@Component({\n  tag: 'tp-input',\n  styleUrl: 'tp-input.scss',\n  shadow: true,\n})\nexport class TpInput {\n  @Element() el: HTMLTpInputElement;\n\n  @Prop({ reflect: true })\n  label: string;\n\n  @Prop({ reflect: true })\n  type: InputType = InputType.Text;\n\n  @Prop({ reflect: true })\n  placeholder: string;\n\n  @Prop({ reflect: true })\n  outlined: boolean;\n\n  @Prop({ reflect: false })\n  startValue: any;\n\n  @Event() didLoad: EventEmitter<{ ref: HTMLTpInputElement }>;\n\n  @Event() userInput: EventEmitter<{ ref: HTMLTpInputElement; event: InputEvent }>;\n\n  componentDidLoad() {\n    this.didLoad.emit({ ref: this.el });\n  }\n\n  handleInput(event: InputEvent) {\n    this.userInput.emit({ ref: this.el, event });\n  }\n\n  render() {\n    const { label, placeholder, type, outlined, startValue } = this;\n\n    return (\n      <Host>\n        {outlined ? (\n          <md-outlined-text-field onInput={this.handleInput.bind(this)} label={label} type={type} placeholder={placeholder} value={startValue}></md-outlined-text-field>\n        ) : (\n          <md-filled-text-field label={label} type={type} placeholder={placeholder} value={startValue}></md-filled-text-field>\n        )}\n      </Host>\n    );\n  }\n}\n"]}